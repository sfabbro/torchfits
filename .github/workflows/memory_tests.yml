name: Memory Leak Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  basic-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest torch numpy astropy pybind11
        
    - name: Test installation
      run: |
        pip install -e .
        
    - name: Run basic functionality tests
      run: |
        python -c "
        import torchfits
        import torch
        print('TorchFits imported successfully')
        
        # Test basic file reading
        data = torchfits.read('examples/basic_example.fits')
        print(f'Read data shape: {data.shape}')
        
        # Test table reading  
        table_data = torchfits.read('examples/table_example.fits', hdu=1)
        print(f'Table has {len(table_data)} columns')
        
        print('Basic tests passed!')
        "

  memory-tests:
    runs-on: ubuntu-latest
    needs: basic-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y valgrind build-essential
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest torch numpy astropy pybind11
        pip install -e .
    
    
    - name: Run memory tests
      run: |
        # Create memory test script
        cat > memory_test.py << 'EOF'
        import torchfits
        import torch
        import os
        
        # Test basic file reading with existing example file
        print("Testing basic FITS reading...")
        data = torchfits.read("examples/basic_example.fits")
        print(f"Read data shape: {data.shape}")
        
        # Test table reading
        print("Testing table reading...")
        table_data = torchfits.read("examples/table_example.fits", hdu=1)
        print(f"Table columns: {list(table_data.keys())}")
        
        # Test header reading
        print("Testing header reading...")
        header = torchfits.get_header("examples/basic_example.fits")
        print(f"Header keys: {len(header)} entries")
        
        # Test WCS if header has WCS info
        try:
            coords = torch.tensor([[10.0, 10.0]], dtype=torch.float64)
            if any(key.startswith('CTYPE') for key in header.keys()):
                world_coords = torchfits.pixel_to_world(coords, header)
                pixel_coords = torchfits.world_to_pixel(world_coords, header)
                print("WCS transformations successful")
            else:
                print("No WCS info in header, skipping WCS tests")
        except Exception as e:
            print(f"WCS test failed (expected for basic example): {e}")
        
        # Test cache clearing
        try:
            torchfits._clear_cache()
            print("Cache cleared successfully")
        except Exception as e:
            print(f"Cache clearing failed: {e}")
            
        print("All tests completed successfully!")
        EOF
        
        # Run with valgrind to check for memory leaks
        valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --error-exitcode=1 python memory_test.py