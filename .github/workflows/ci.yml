name: Comprehensive CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [published]

env:
  FORCE_COLOR: 1

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort mypy pre-commit
    
    - name: Run black
      run: black --check --diff src/ tests/
    
    - name: Run isort  
      run: isort --check-only --diff src/ tests/
    
    - name: Run mypy
      run: mypy src/torchfits/ --ignore-missing-imports
    
    - name: Run pre-commit
      run: |
        pre-commit install
        pre-commit run --all-files

  build-test:
    name: Build & Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.10', '3.13']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libcfitsio-dev wcslib-dev build-essential
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install torch --index-url https://download.pytorch.org/whl/cpu
        pip install numpy astropy fitsio pytest pybind11
    
    - name: Build package
      run: |
        pip install -e .
    
    - name: Test import
      run: |
        python -c "import torchfits; print(f'torchfits v{torchfits.__version__} imported successfully')"
    
    - name: Run basic functionality tests
      run: |
        python -c "
        import torchfits
        import torch
        print('torchfits imported successfully')
        
        # Test basic file reading
        data = torchfits.read('examples/basic_example.fits')
        print(f'Read data shape: {data.shape}')
        
        # Test table reading  
        table_data = torchfits.read('examples/table_example.fits', hdu=1)
        print(f'Table has {len(table_data)} columns')
        
        print('Basic tests passed!')
        "
    
    - name: Run full test suite
      run: |
        pytest tests/ -v --tb=short
    
    - name: Run examples
      run: |
        cd examples
        python example_basic_reading.py
        python example_tables.py

  memory-safety:
    name: Memory Leak Detection
    runs-on: ubuntu-latest
    needs: build-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y valgrind libcfitsio-dev wcslib-dev build-essential
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install torch --index-url https://download.pytorch.org/whl/cpu
        pip install numpy astropy fitsio pytest pybind11
        pip install -e .
    
    - name: Run memory leak tests
      run: |
        # Extended memory test script
        cat > memory_stress_test.py << 'EOF'
        import torchfits
        import torch
        import gc
        
        print("=== Memory Stress Testing ===")
        
        # Test repeated file reading
        for i in range(100):
            data = torchfits.read("examples/basic_example.fits")
            del data
            if i % 25 == 0:
                gc.collect()
                print(f"Iteration {i} completed")
        
        # Test table operations
        for i in range(50):
            table = torchfits.read("examples/table_example.fits", hdu=1)
            del table
            if i % 10 == 0:
                gc.collect()
        
        # Test cache operations
        try:
            torchfits._clear_cache()
            print("Cache cleared successfully")
        except:
            print("Cache clearing not available")
        
        print("Memory stress test completed!")
        EOF
        
        valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --error-exitcode=1 python memory_stress_test.py

  performance-benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: build-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libcfitsio-dev wcslib-dev build-essential
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install torch --index-url https://download.pytorch.org/whl/cpu
        pip install numpy astropy fitsio pytest pybind11
        pip install -e .
    
    - name: Run performance benchmarks
      run: |
        pytest tests/test_official_benchmark_suite.py -v --tb=short
        pytest tests/test_comprehensive_benchmark.py -v --tb=short
    
    - name: Generate performance report
      run: |
        python -c "
        import torchfits
        print('=== Performance Summary ===')
        print('torchfits successfully built and tested')
        print('See test output above for detailed benchmarks')
        "

  documentation:
    name: Documentation Build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme
    
    - name: Build documentation
      run: |
        # Add when docs/ directory exists
        echo "Documentation build would go here"
        echo "README.md exists: $(ls -la README.md)"

  parity-matrix:
    name: API Parity Matrix
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Generate parity matrix
      run: |
        python scripts/gen_parity_matrix.py --output artifacts/validation/parity_matrix.md
    - name: Upload parity artifact
      uses: actions/upload-artifact@v4
      with:
        name: parity-matrix
        path: |
          artifacts/validation/parity_matrix.md
          artifacts/validation/parity_matrix.json

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [code-quality, build-test, memory-safety]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
