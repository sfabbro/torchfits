[build-system]
# Compatible with both pip and pixi-build cmake backend
# When using pixi-build, these are automatically provided but we keep them for pip compatibility
requires = [
    "scikit-build-core>=0.10",
    "pybind11>=2.11.0"
]
build-backend = "scikit_build_core.build"

[project]
name = "torchfits"
version = "0.1.0"
description = "High-performance FITS I/O for PyTorch"
authors = [{ name = "Seb Fabbro", email = "sebfabbro@gmail.com" }]
readme = "README.md"
license = { text = "GPL-2" }
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GPL-2 License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
]
requires-python = ">=3.11"

# Core runtime dependencies for the library.
# These are automatically managed by pixi for conda packages
# but needed here for PyPI compatibility
dependencies = [
    "torch>=2.0.0",
    "pytorch-frame>=0.2.0",
    "psutil>=5.0.0",  # For system resource monitoring
    "numpy>=1.20.0",  # Core numerical operations
]

[project.urls]
Homepage = "https://github.com/sfabbro/torchfits"
Repository = "https://github.com/sfabbro/torchfits"

# Defines optional dependencies for different use cases.
# For pixi environments, these are managed separately via features
[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0", 
    "ruff>=0.1.0",
    "mypy>=1.0",
    "ipykernel",
]
bench = [
    "astropy>=5.0",
    "fitsio>=1.1",
    "pandas>=1.0",
    "matplotlib>=3.0",
    "seaborn>=0.11.0",
    "pytest-benchmark>=3.0",
    "psutil>=5.0",
]
test = [
    "pytest>=6.0",
    "pytest-cov>=2.0", 
    "pytest-benchmark>=3.0",
]

# Configuration for the scikit-build-core build system.
[tool.scikit-build]
# Specifies the directory containing the top-level CMakeLists.txt file.
cmake.source-dir = "src/torchfits/cpp"

# Configures the install directory for the compiled extension.
# This ensures the compiled `cpp.so` or `cpp.pyd` file is placed inside the `torchfits` package.
install.strip = false
wheel.packages = ["src/torchfits"]

# This setting enables CMake's incremental build feature. When you re-run the build,
# CMake and Ninja will automatically detect which C++ files have changed and only
# recompile those, leading to much faster iteration times.
build-dir = "build/{wheel_tag}"