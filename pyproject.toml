[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "torchfits"
version = "0.2.0"
authors = [
    {name = "Seb Fabbro", email = "sebfabbro@gmail.com"},
]
description = "A fast FITS reader for PyTorch"
readme = "README.md"
requires-python = ">=3.10,<3.14"
license = "GPL-2.0-only"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research", 
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: C++",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Topic :: Scientific/Engineering :: Physics",
]
dependencies = [
    "torch>=2.0.0,<3",
    "numpy>=1.20.0"
]

[project.urls]
Homepage = "https://github.com/sfabbro/torchfits"
Issues = "https://github.com/sfabbro/torchfits/issues"
Documentation = "https://github.com/sfabbro/torchfits/blob/main/README.md"

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "pre-commit>=2.0.0",
    "astropy>=5.0.0",
    "fitsio>=1.1.0",
    "black>=23.0.0",
    "isort>=5.0.0",
    "mypy>=1.0.0",
    "build>=0.10.0"
]
examples = [
    "matplotlib>=3.0.0",
    "fsspec>=2023.1.0"
]
remote = [
    "fsspec>=2023.1.0"
]
dataframe = [
    "pytorch-frame>=0.2.0"
]
all = [
    "torchfits[dev,examples,remote,dataframe]"
]

# Tool configurations
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra --tb=short"
testpaths = ["tests"]
norecursedirs = ["build", "dist", ".git", ".tox", "*.egg"]

[tool.black]
line-length = 88
target-version = ['py312']

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

# Ruff configuration (style, imports, docstring enforcement, complexity)
[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E", "F",          # pycodestyle & pyflakes
    "I",                # isort
    "N",                # pep8-naming
    "D",                # pydocstyle (docstrings)
    "B",                # flake8-bugbear
    "C90",              # mccabe complexity
    "UP",               # pyupgrade
    "SLOT",             # flake8-slots
]
ignore = ["D104", "D105", "D107"]  # reduce noise for magic methods / __init__ docstrings initially
exclude = ["build", "dist", "cfitsio-4.4.1-20240617", "fitsio"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.mccabe]
max-complexity = 12

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"

[tool.hatch.build.targets.wheel]
packages = ["src/torchfits"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/examples", 
    "/README.md",
    "/LICENSE",
    "/pyproject.toml"
]

# Pixi workspace configuration
[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["osx-arm64", "linux-64"]

[tool.pixi.pypi-dependencies]
torchfits = { path = ".", editable = true }

# Core dependencies (system libraries only via conda)
[tool.pixi.dependencies]
python = ">=3.10,<3.14"
cfitsio = ">=4.0.0"
wcslib = ">=8.2.2,<9"
pytest = ">=8.4.1,<9"
astropy = ">=7.1.0,<8"
psutil = ">=7.0.0,<8"
editables = "*"
hatchling = "*"
pip = "*"
cxx-compiler = "*"
cmake = ">=3.15"
ninja = "*"
pkg-config = "*"
mypy = ">=1.17.1,<2"

# Development feature - Additional conda dependencies
[tool.pixi.feature.dev.dependencies]
pip = "*"

# Build feature for C++ compilation
[tool.pixi.feature.build.dependencies]
cxx-compiler = "*"
cmake = ">=3.15"
ninja = "*"
pkg-config = "*"

# Examples feature - Additional conda dependencies only
[tool.pixi.feature.examples.dependencies]

# Remote access feature - Additional conda dependencies only  
[tool.pixi.feature.remote.dependencies]

# DataFrame integration feature - Additional conda dependencies only
[tool.pixi.feature.dataframe.dependencies]

# Benchmarking feature - Additional conda dependencies only
[tool.pixi.feature.bench.dependencies]

# Environment definitions
[tool.pixi.environments]
default = { solve-group = "default" }
dev = { features = ["dev", "build"], solve-group = "default" }
examples = { features = ["examples"], solve-group = "default" }
remote = { features = ["remote"], solve-group = "default" }
dataframe = { features = ["dataframe"], solve-group = "default" }
bench = { features = ["bench", "dev"], solve-group = "default" }
full = { features = ["dev", "build", "examples", "remote", "dataframe", "bench"], solve-group = "default" }

# Task definitions
[tool.pixi.tasks]
# Build tasks
build = "python -m pip install -e . --no-build-isolation"
build-dev = "python -m pip install -e .[dev] --no-build-isolation"
clean = "rm -rf build/ dist/ src/torchfits.egg-info/ src/torchfits/__pycache__/"

# Testing tasks  
test = "pytest tests/"
test-verbose = "pytest -v tests/"
test-coverage = "pytest --cov=torchfits tests/"

# Code quality tasks
format = "black src tests examples && isort src tests examples"
lint = "black --check src tests examples && isort --check src tests examples"
type-check = "mypy src/torchfits"
pre-commit-install = "pre-commit install"
pre-commit-run = "pre-commit run --all-files"

# Development tasks
dev-setup = { cmd = "pixi run pre-commit-install && pixi run build-dev", depends-on = ["build-dev", "pre-commit-install"] }
check-all = { cmd = "pixi run lint && pixi run type-check && pixi run test", depends-on = ["lint", "type-check", "test"] }

# Benchmark tasks
[tool.pixi.feature.bench.tasks]
benchmark = "python -m pytest tests/test_official_benchmark_suite.py -v"
benchmark-quick = "python tests/benchmark_runner.py"

# Add benchmark tasks to default environment too
[tool.pixi.tasks.benchmark-default]
cmd = "python -m pytest tests/test_official_benchmark_suite.py -v"

[tool.pixi.tasks.benchmark-quick-default]  
cmd = "python tests/benchmark_runner.py"